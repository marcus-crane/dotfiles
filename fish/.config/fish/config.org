#+title: My Fish configuration
#+options: toc:2
#+property: header-args :tangle config.fish

Welcome to my configuration. It's always a work in progress.

* Setting up PATHS

** Universal system folders

These paths generally exist on most every system so we'll set them separate from other PATH additions.

#+begin_src fish
set -xg PATH /bin /sbin /usr/local/bin /usr/bin /usr/sbin /usr/local/sbin /opt/X11/bin $PATH
#+end_src

** Initialisation

This section consists of helpers functions and global variables used by various applications.

A few of the helper functions are intended to make sure my configuration acts mostly identical across all machines and OSes without any extra configuration.

Whether that statement holds true is... debatable :)

** Determining the current OS

In order to save having to remember how to use ~uname~ and all that, I just have my own little configuration within my shell that I can reference

#+begin_src fish
if string match -q '*microsoft*' -- (uname -r)
    set OPSYS "windows"
else
    set OPSYS (string lower (uname))
end
#+end_src

Windows is a bit of a misnomer here because what I'm really checking for is whether the shell is running inside of [[https://docs.microsoft.com/en-us/windows/wsl/about][Windows Subsystem for Linux (WSL)]]

Functionally, I can treat WSL and Linux the same (and I do) but there are some minor alterations I make use of, such as pointing the ~DISPLAY~ environment variable at an X display server on my host system

It's worth noting that the value of ~$OPSYS~ on ~macOS~ is ~darwin~. I could change it to be clearer but [[https://en.wikipedia.org/wiki/Darwin_(operating_system)][Darwin]] is technically the correct name for the base operating system

** Setting my workspace

All of my development occurs in ~$HOME/Code~ regardless of what machine I'm on. One day I might change it though hence the variable.

#+begin_src fish
set -x WORKSPACE "$HOME/Code"
#+end_src

** Setting various global constants

#+begin_src fish
set -x CONFIG_FILE    "$HOME/.config/fish/config.fish"
set -x CONFIG_SRC     "$HOME/.config/fish/config.org"
set -x EDITOR         (command -v nvim)
set -x GPG_TTY        (tty)
set -x LANGUAGE       "en_NZ:en"
set -x LAST_MODIFIED  "(date)"
#+end_src

** Setting some Windows / WSL specific constants

#+begin_src fish
if test $OPSYS = "windows"
    set -x DISPLAY (cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'):0.0 # (1)
    set -x BROWSER "/mnt/c/Windows/explorer.exe" # (2)
end
#+end_src


1. If I'm running on a Windows machine, I run Emacs by starting a daemon inside my terminal and connecting with ~emacsclient~. Doing so spawns a new frame using the X display server running on the Windows host itself

2. While I don't believe this actually works, I attempt to override the ~BROWSER~ environment variable to open links on the Windows host from within Emacs
** Convenience functions
I had to remind myself why this exists but it's just a convenience function to make my configuration slightly more readable

#+begin_src fish
alias scut="abbr -a -g"
#+end_src

* Applications

** [[https://github.com/asdf-vm/asdf][asdf]]

The version manager to rule them all

It wraps a number of existing language version managers into plugins that can be managed through one unified CLI tool

#+begin_src fish
set -x ASDF_DIR $HOME/.asdf
if test -e $ASDF_DIR
    source $ASDF_DIR/asdf.fish
    if not test -e $HOME/.config/fish/completions
        mkdir -p $HOME/.config/fish/completions; and cp $HOME/.asdf/completions/asdf.fish $HOME/.config/fish/completions # (2)
    end
end
#+end_src

1. Autocompletions aren't added to Fish so this step, provided by the asdf docs, configures them properly

** [[https://dropbox.com][Dropbox]]

Depending on which computer I'm using, I'll often have my Dropbox in different places

At present, I don't have any machines where Dropbox isn't in my home directory, but this variable is handy to have in the event that changes.

Any downstream configuration making use of it won't need to know about potentially breaking changes.

#+begin_src fish
set -x DROPBOX_DIR $HOME/Dropbox
#+end_src

** fzf

** git

To save me having to set up each machine, I just set my Git identifiers each time

#+begin_src fish
git config --global user.name "Marcus Crane"
git config --global user.email "marcus@utf9k.net"
#+end_src

** Homebrew

Sometimes I have trouble with rsync which is about the only thing that this snippet fixes

#+begin_src fish
if test $OPSYS = "darwin"
    set -xg PATH /usr/bin/local $PATH
end
#+end_src

* Languages

** Erlang

Whenever I compile ~erlang~ (using ~asdf~), I always use the same flags so it's easier to set them once within my shell and be done with it.

#+begin_src fish
set -x KERL_CONFIGURE_OPTIONS "--disable-debug --without-javac"
set -x KERL_BUILD_DOCS        "yes"
#+end_src

** go

Some of these are arguably redundant with the advent of ~GOMODULES~ but you never know when they might be needed.

#+begin_src fish
set -x GOPATH      "$WORKSPACE/go"
set -x PATH        $GOPATH/bin $GOROOT $PATH
set -x GO111MODULE on
#+end_src

*** TODO GO111MODULE deprecation
SCHEDULED: <2021-03-31 Wed>

As of [[https://golang.org/doc/go1.16][Go 1.16]], ~GO111MODULE~ can be removed so this is a reminder to eventually get around to doing that:  

** Work setup

#+begin_src fish
set -a fish_function_path $HOME/dotfiles/work
if test -e $HOME/.work_aliases.fish
    source $HOME/.work_aliases.fish
end
#+end_src

* Shortcuts
A whole bunch of shortcuts, or as fish calls them, "abbreviations"

#+begin_src fish
scut ae      "source ./venv/bin/activate.fish"
scut de      "deactivate"
scut edit    "$EDITOR $CONFIG_SRC"
scut gb      "git branch -v"
scut gcm     "git commit -Si"
scut gr      "git remote -v"
scut gst     "git status"
scut pap     "git pull upstream master && git push origin master"
scut refresh "tangle $CONFIG_SRC && stow fish -d $HOME/dotfiles && source $CONFIG_FILE"
scut venv    "python3 -m virtualenv venv && ae"
scut vi      "nvim"
scut view    "less $CONFIG_FILE"
scut vim     "nvim"
scut ws      "cd $WORKSPACE"
#+end_src
