#+title: My Doom Emacs configuration
#+options: toc:2
#+startup: content
#+property: header-args :tangle config.el
#+setupfile: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

# Local variables:
# eval: (add-hook 'after-save-hook 'org-html-export-to-html t t)
# end:

* Core setup
** Lexical binding
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
** User details
#+begin_src emacs-lisp
(setq user-full-name "Marcus Crane"
      user-mail-address "marcus@utf9k.net")
#+end_src
** Theming
#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
#+end_src
** Dropbox
I make use of [[https://dropbox.com][Dropbox]] to sync and store my org files.

The location of Dropbox differs between all of my machines so I have an environment variable, ~$DROPBOX_DIR~, set by my shell.

On some systems, it may live in my home directory while on others, it may live on an external hard drive for example.

NOTE: This will (unfortunately) set a hard dependency on Dropbox existing. If it isn't present, most of my Emacs config will break.

#+begin_src emacs-lisp
(setq dropbox       (getenv "DROPBOX_DIR")
      dropbox-org   (concat dropbox "/org")
      dropbox-tmpl  (concat dropbox-org "/templates/")
      dropbox-gtd   (concat dropbox-org "/gtd/")
      dropbox-notes (concat dropbox-org "/notes/"))
#+end_src
** Common files
Here are some variables for locations I often access, or want to encourage myself to access
#+begin_src emacs-lisp
(setq workspace     (getenv "WORKSPACE")
      utf9k-notes   (concat workspace "/utf9k/content-org/notes/")
      utf9k-zettels (concat workspace "/utf9k/content-org/zettels/"))
#+end_src
** Shell (fish)
I currently use fish as my shell of choice so I add a hook to make use of ~fish_indent~

#+begin_src emacs-lisp
(add-hook 'fish-mode-hook (lambda ()
                            (add-hook 'before-save-hook 'fish_indent=before-save)))
#+end_src
** Usability tweaks
*** How can I get Emacs to not open "find file" when double tapping <SPC>?
#+begin_src emacs-lisp
(map! :after ivy
      :map ivy-minibuffer-map
      "S-SPC" nil)
#+end_src
*** I want a glowy line to appear when I move my cursor
#+begin_src emacs-lisp
(beacon-mode 1)
#+end_src
* org-mode
** Shared settings
#+begin_src emacs-lisp
(after! org
  (setq org-directory        dropbox-gtd
        org-agenda-directory dropbox-gtd
        org-ellipsis         "â¤µ"))
#+end_src
** Agenda settings
*** Where should org look for tasks?
#+begin_src emacs-lisp
(after! org
  (setq org-agenda-files
        `(,(concat org-agenda-directory "focus.org")
          ,(concat org-agenda-directory "habits.org")
          ,(concat org-agenda-directory "inbox.org")
          ,(concat org-agenda-directory "repeaters.org")
          ,(concat org-agenda-directory "tickler.org"))))
#+end_src
*** How should org archive completed tasks?
#+begin_src emacs-lisp
(after! org
  (setq org-archive-location
        (concat org-agenda-directory "archive/archive-"
                (format-time-string "%Y%m" (current-time))
                ".org::")))
#+end_src
*** Where should org be allowed to refile tasks?
#+begin_src emacs-lisp
(after! org
  (setq org-refile-targets
        `((,(concat org-agenda-directory "focus.org")     :maxlevel . 1)
          (,(concat org-agenda-directory "ideas.org")     :level    . 0)
          (,(concat org-agenda-directory "repeaters.org") :maxlevel . 1)
          (,(concat org-agenda-directory "research.org")  :level    . 0)
          (,(concat org-agenda-directory "someday.org")   :level    . 0)
          (,(concat org-agenda-directory "tickler.org")   :maxlevel . 1))))
#+end_src
*** What statuses can tasks have?
#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "WAITING(w@/!)"
           "|"
           "DONE(d)"
           "CANCELLED(c)"))))
#+end_src
*** What tags can be associated with a task?
#+begin_src emacs-lisp
(setq org-tag-alist
      '(("@errand"   . ?e)
        ("@home"     . ?h)
        ("@office"   . ?o)))
#+end_src
*** How can I hide items that are scheduled for the future?
#+begin_src emacs-lisp
(after! org
  (setq org-agenda-todo-ignore-scheduled 'future))
#+end_src
** Capture templates
#+begin_src emacs-lisp
(after! org
  (setq org-capture-templates
        `(("i" "inbox" entry
           (file ,(concat org-agenda-directory "inbox.org"))
           "* TODO %i%?")
          ("d" "daily checklist" entry
           (file+olp+datetree ,(concat org-agenda-directory "checklists/daily.org"))
           (file ,(concat dropbox-tmpl "daily_checklist.org")))
          ("w" "weekly review" entry
           (file+olp+datetree ,(concat org-agenda-directory "reviews/weekly.org"))
           (file ,(concat dropbox-tmpl "weekly_review.org"))
           :immediate-finish t)
          ("h" "horizons review" entry
           (file+olp+datetree ,(concat org-agenda-directory "reviews/horizons.org"))
           (file ,(concat dropbox-tmpl "horizon_review.org"))
           :immediate-finish t :tree-type month))))
#+end_src
** Modules
*** Enabling org-habit
#+begin_src emacs-lisp
(after! org
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit))
#+end_src
