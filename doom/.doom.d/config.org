:DOC-CONFIG:
#+startup: fold
#+property: header-args:emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comments no
:END:

#+title: Doom Emacs config
#+author: Marcus Crane
#+email: marcus@utf9k.net

* Core setup
** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical binding]]
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
** Who am I?

#+begin_src emacs-lisp
(setq user-full-name "Marcus Crane"
      user-mail-address "marcus@utf9k.net")
#+end_src
** Netocean
I store all of my org files on a [[https://www.synology.com/en-nz/products/DS220j][Synology DS220j]] at my house, which has redundancy thanks to RAID and just to be extra safe, also syncs content with Dropbox as a backup point.

The Synology NAS has a webdav server which is what I mount to my computers and then sync files locally, not unlike Dropbox, thanks to [[https://mountainduck.io/][Mountain Duck]].

As for the name, Netocean is just the dorky name I use to refer to my personal file storage. It's short for network ocean (ie an ocean of files) and is [[https://wikimon.net/Net_Ocean][totally not taken from Digimon]].

#+begin_src emacs-lisp
(setq netocean "~/netocean")
#+end_src
** Useful bits

Moving items to the trash? Nice
Getting more granular undo? Nice
Auto saving? Nice
A nicer looking truncation? Nice
#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t)

(setq evil-want-fine-undo t
      auto-save-default t
      truncate-string-ellipsis "â€¦")
#+end_src

Displaying the time in the bottom bar seems like a good idea

#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src

Probably handy to display battery usage when I'm on a laptop

#+begin_src emacs-lisp
(if (equal "Battery status not available"
           (battery))
    (display-battery-mode 1)
  (setq password-cache-expiry nil))
#+end_src

We don't need to see UTF-8 in the bottom bar all the time [[https://tecosaur.github.io/emacs-config/config.html#theme-modeline][>>]]

#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src
* Org mode
** Setting up
*** Where do my org files live?
#+begin_src emacs-lisp
(after! org
  (setq org-directory (concat netocean "/org/")))
#+end_src
*** Where to look for org tasks?
#+begin_src emacs-lisp
(setq org-agenda-files '("~/netocean/org"))
#+end_src
*** What shall we do with completed tasks?
#+begin_src emacs-lisp
(setq org-archive-location
      (concat org-directory "archive/archive-"
              (format-time-string "%Y%m" (current-time))
              ".org::"))
#+end_src
*** How can we include diary entries?
#+begin_src emacs-lisp
(setq org-agenda-include-diary t)
#+end_src
*** Can we dim tasks that can't be completed yet?
#+begin_src emacs-lisp
(setq org-agenda-dim-blocked-tasks t)
#+end_src
** Workflow
*** What statuses can a task have?
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence
         "TODO(t!)"
         "NEXT(n)"
         "SOMD(s)"
         "WAIT(w@/!)"
         "|"
         "DONE(d!)"
         "CANC(c!)")))
#+end_src
*** What tags can a task have?
#+begin_src emacs-lisp
(setq org-tag-alist
      '(("@errand" . ?e)
        ("@home"   . ?h)
        ("@office" . ?o)))
#+end_src
*** Where can tasks be refiled?
#+begin_src emacs-lisp
(setq org-refile-targets
      `((,(concat org-directory "projects.org"))
        (,(concat org-directory "bugs.org"))
        (,(concat org-directory "tickler.org"))
        (,(concat org-directory "ideas.org"))
        (,(concat org-directory "work.org"))))
#+end_src
*** Where are tasks logged?
#+begin_src emacs-lisp
(setq org-treat-insert-todo-heading-as-state-change t
      org-log-into-drawer t)
#+end_src
** Quality of life
*** How can I speed up capturing tasks?
#+begin_src emacs-lisp
(setq org-inbox (concat org-directory "inbox.org")
      org-capture-templates
      `(("i" "inbox" entry
         (file org-inbox)
         "* TODO %i%?")
        ))
#+end_src
** Agenda
~org-super-agenda~ is a handy tool for getting a high level overview of my org tasks. Almost like a dashboard of sorts!
#+begin_src emacs-lisp
(use-package! org-super-agenda
  :commands (org-super-agenda-mode)
  :init
  (map! "C-c a" #'switch-to-agenda)
  (defun switch-to-agenda ()
    (interactive)
    (org-agenda nil "c")))
(after! org-agenda
  (org-super-agenda-mode))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-compact-blocks t
      org-agenda-start-day nil
      org-agenda-span 1
      org-agenda-time-grid
      (quote
       ((daily today remove-match)
        (900 1100 1300 1500 1700)
        "......" "----------------"))
      org-agenda-start-on-weekday nil)

(setq org-agenda-custom-commands
      '(("c" "Super view"
         ((agenda "" ((org-agenda-overriding-header "")
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :scheduled today
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:log t)
                          (:name "To refile"
                           :file-path "inbox\\.org")
                          (:name "Next Up"
                           :todo "NEXT"
                           :order 1)
                          (:name "Coming Up"
                           :scheduled future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :order 7)
                          (:discard (:not (:todo "TODO")))))))))))
#+end_src
** Deft
#+begin_src emacs-lisp
(use-package deft
  :after org
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory org-directory))
#+end_src
** org-roam
#+begin_src emacs-lisp
(setq org-roam-directory (concat netocean "/brain/"))
(use-package! org-mac-iCal)
#+end_src
** Checklists
#+begin_src emacs-lisp
(after! org
  (require 'org-checklist)
  (add-to-list 'org-modules 'org-checklist))
#+end_src
** Habit tracking
#+begin_src emacs-lisp
(after! org
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit))
#+end_src
* Extra Doom setup
While still technically part of [[#core-setup][Core setup]], I've stuck this configuration at the bottom purely because of how long it is.

** What Doom modules do we want to initialise?
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ivy               ; a search engine for love and life

       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; ðŸ™‚
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       (ligatures +extra)  ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs            ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       (undo +tree)      ; persistent, smarter undo for your inevitable mistakes TODO: Check extra config suggestions
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;spell             ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       (javascript +lsp)   ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org
        +roam)       ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp)       ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src
** What extra packages do we want to install?
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
                                        ;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
                                        ;(package! another-package
                                        ;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
                                        ;(package! this-package
                                        ;  :recipe (:host github :repo "username/repo"
                                        ;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
                                        ;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
                                        ;(package! builtin-package :recipe (:nonrecursive t))
                                        ;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
                                        ;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
                                        ;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
                                        ;(unpin! pinned-package)
;; ...or multiple packages
                                        ;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
                                        ;(unpin! t)
(package! org-mac-iCal
  :recipe (:host github :repo "terjesannum/org-mac-iCal"))
(package! org-super-agenda)
#+end_src

* Local variables
In lieu of using Doom Emacs to automatically tangle this file, I instead just invoke ~org-babel-tangle~ anytime I save the file.
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
