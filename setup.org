#+title: Setup shell script
#+options: toc:2
#+property: header-args :tangle setup.sh

* Overview

I tend to run a lot of the same setup commands over and over but I've never gotten around to actually automating this crap

Even better than making a shell script, I can make a literate program using ~org-mode~

* Determining our environment

Ideally, this thing will work cross platform so before we begin, we want to figure out what platform we're actually running.

I'm basically just going to do the same check that all of my shells do to make life easier

#+begin_src bash
if [[ $(uname -r) =~ 'microsoft' ]]; then
    export OPSYS="windows"
else
    export OPSYS=${(L)$(uname -s)}
fi
#+end_src

This block will set the environment variable ~OPSYS~ to one of three potential values:

- "windows"
- "darwin" (macOS)
- "linux"

Based on whichever platform I'm running, I'll want to run some commands regardless and others selectively like only installing Homebrew on macOS for example.

In most cases, any system marked as "windows" will actually be a distribution under the Windows Subsystem for Linux.

Nothing will ever get me to use Powershell on a permanent basis!

With our operating system names available for quick reference, we can also determine our installer prefixes

#+begin_src bash
if [[ $OPSYS == "darwin" ]]; then
    export INSTALL_PREFIX="brew install"
else
    export INSTALL_PREFIX="sudo apt-get install"
fi
#+end_src

* Distro specific setup

** Darwin / macOS

*** Installing Homebrew

Before we even do anything, it's usually ideal to install the ever handy Homebrew.

#+begin_src bash
if [[ ! $(command -v brew) ]]; then
   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
else
    echo "~ Homebrew is installed"
fi
#+end_src

* Shared setup

** Installing dependencies

I don't really want to pollute my terminal output in the case that a bunch of dependencies are found so how about we make a wrapper function first

#+begin_src bash
function checkdependency {
    if [[ ! $(command -v $@) ]]; then
        $INSTALL_PREFIX $@
    else
        echo "~ $@ is installed"
    fi
}
#+end_src

#+begin_src bash
checkdependency gpg2
checkdependency git
checkdependency pass
checkdependency stow
#+end_src

** Cloning dotfiles

You'd think they would already exist or how else is this script running but I can imagine making a shell script that exists on my website in order to keep this setup as minimal as possible

We should check just in case

#+begin_src bash
if [[ ! -a ~/dotfiles ]]; then
   git clone https://github.com/marcus-crane/dotfiles ~/dotfiles
else
    echo "~ dotfiles already cloned"
fi
#+end_src
